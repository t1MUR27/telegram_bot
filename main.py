# API = 'd39e0e39d9f7fa075616a590965fe979'
import requests
from pprint import pprint
import json
from datetime import datetime

parametrs = {
    'appid': 'd39e0e39d9f7fa075616a590965fe979',
    'units': 'metric',
    'lang': 'ru'
}
json_data = []


def weather_forecat(city):
    while True:
        parametrs['q'] = city
        code_to_smile = {
            'Clear': '–Ø—Å–Ω–æ üåû',
            'Clouds': '–û–±–ª–∞—á–Ω–æ ‚õÖ',
            'Rain': '–î–æ–∂–¥—å üåß',
            'Dreezle': '–î–æ–∂–¥—å ‚òîüöøüåß',
            'Thunderstorm': '–ì—Ä–æ–∑–∞ üå©',
            'Snow': '–°–Ω–µ–≥ üå®‚ùÑ',
            'Mist': '–¢—É–º–∞–Ω üå´üòñ'

        }
        if city == 'stop':
            with open('weather.json', mode='w', encoding='UTF-8') as file:
                json.dump(json_data, file, ensure_ascii=False, indent=4)
            break
        try:
            data = requests.get('https://api.openweathermap.org/data/2.5/weather', params=parametrs).json()
            # pprint(data)

            temperatura = data['main']['temp']
            humidity = data['main']['humidity']
            country = data['sys']['country']
            weather = data['weather'][0]['main']
            wind = data['wind']['deg']
            wind_speed = data['wind']['speed']
            timezone = data['timezone']
            sunrise = datetime.utcfromtimestamp(int(data['sys']['sunrise']) + int(timezone)).strftime(
                '%d-%m-%Y %H:%M:%S')
            sunset = datetime.utcfromtimestamp(int(data['sys']['sunset']) + int(timezone)).strftime('%d-%m-%Y %H:%M:%S')

            if weather in code_to_smile:
                wd = code_to_smile[weather]
            else:
                wd = '–ù–∞–¥–æ –±—É–¥–µ—Ç —Å–∞–º–æ–º—É –ø—Å–æ–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —Ç–∞–º! üòÖ'

            return (f'''
            —Å—Ç—Ä–∞–Ω–∞: {country}, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - {datetime.utcfromtimestamp(int(data['timezone'])).strftime('%H:%M:%S')},
            —Ç–µ–º–ø–µ—Ä–∞—Ç—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city} - {temperatura} –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ —Ü–µ–ª—å—Å–∏—é,
            –ø–æ–≥–æ–¥–∞ -  {wd},
            –≤–ª–∞–∂–Ω–æ—Å—Ç—å - {humidity} %,
            –≤–µ—Ç–µ—Ä - {wind_speed} –º/—Å, –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {wind} –≥—Ä–∞–¥—É—Å–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≤–µ—Ä–∞,
            –≤–æ—Å—Ö–æ–¥ - {sunrise},
            –∑–∞–∫–∞—Ç - {sunset}
        ''')
            json_data.append({
                '—Å—Ç—Ä–∞–Ω–∞': country,
                '–≥–æ—Ä–æ–¥': city,
                '—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å': timezone,
                '—Ç–µ–º–ø–µ—Ä–∞—Ç—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ': temperatura,
                '–ø–æ–≥–æ–¥–∞': weather,
                '–≤–ª–∞–∂–Ω–æ—Å—Ç—å': humidity,
                '–≤–µ—Ç–µ—Ä': wind_speed,
                '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞': wind,
                '–≤–æ—Å—Ö–æ–¥': sunrise,
                '–∑–∞–∫–∞—Ç': sunset,
            })

        except:
            return ('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞!')
